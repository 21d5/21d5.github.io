<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>deployment on 阳明的博客</title>
    <link>https://www.qikqiak.com/tags/deployment/</link>
    <description>Recent content in deployment on 阳明的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.qikqiak.com/tags/deployment/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes Deployment 故障排查常见方法[译]</title>
      <link>https://www.qikqiak.com/post/troubleshooting-deployments/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/troubleshooting-deployments/</guid>
      <description>&lt;p&gt;本文翻译自 &lt;a href=&#34;https://learnk8s.io/troubleshooting-deployments&#34;&gt;A visual guide on troubleshooting Kubernetes deployments&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;下面示意图可以帮助你调试 Kubernetes Deployment（你可以在此处&lt;a href=&#34;https://learnk8s.io/a/troubleshooting-kubernetes.pdf&#34;&gt;【下载它的 PDF 版本】&lt;/a&gt;），另外在微信群里面也看到有朋友分享了一个对应的中文版（你可以在此处&lt;a href=&#34;https://bxdc-static.oss-cn-beijing.aliyuncs.com/images/trouble-deploy-cn.png&#34;&gt;【下载它的中文版本】&lt;/a&gt;）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://bxdc-static.oss-cn-beijing.aliyuncs.com/images/trouble-deploy.png&#34; alt=&#34;troubleshooting deployments&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当你希望在 Kubernetes 中部署应用程序时，你通常会定义三个组件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deployment – 用于创建你的应用程序的 Pod 副本的清单；&lt;/li&gt;
&lt;li&gt;Service – 一个内部负载均衡器，用于将流量路由到内部的 Pod 上；&lt;/li&gt;
&lt;li&gt;Ingress – 描述流量如何从集群外部流入到集群内部的服务上。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面的示意图可以来简单说明：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes 部署策略详解</title>
      <link>https://www.qikqiak.com/post/k8s-deployment-strategies/</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/k8s-deployment-strategies/</guid>
      <description>&lt;p&gt;在&lt;code&gt;Kubernetes&lt;/code&gt;中有几种不同的方式发布应用，所以为了让应用在升级期间依然平稳提供服务，选择一个正确的发布策略就非常重要了。&lt;/p&gt;

&lt;p&gt;选择正确的部署策略是要依赖于我们的业务需求的，下面我们列出了一些可能会使用到的策略：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;重建(recreate)：停止旧版本部署新版本&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;滚动更新(rolling-update)：一个接一个地以滚动更新方式发布新版本&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;蓝绿(blue/green)：新版本与旧版本一起存在，然后切换流量&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;金丝雀(canary)：将新版本面向一部分用户发布，然后继续全量发布&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;A/B测(a/b testing)：以精确的方式（HTTP 头、cookie、权重等）向部分用户发布新版本。&lt;code&gt;A/B测&lt;/code&gt;实际上是一种基于数据统计做出业务决策的技术。在 Kubernetes 中并不原生支持，需要额外的一些高级组件来完成改设置（比如Istio、Linkerd、Traefik、或者自定义 Nginx/Haproxy 等）。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>使用YAML 文件创建 Kubernetes Deployment</title>
      <link>https://www.qikqiak.com/post/use-yaml-create-kubernetes-deployment/</link>
      <pubDate>Fri, 02 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/use-yaml-create-kubernetes-deployment/</guid>
      <description>&lt;p&gt;在之前的文章中，我们一直在讨论如何使用&lt;code&gt;kubernetes&lt;/code&gt;，很多时候我们知道怎么使用&lt;code&gt;kubectl&lt;/code&gt;命令行工具来启动一个&lt;code&gt;POD&lt;/code&gt;，也看到我们在安装kubernetes 过程中使用了一些 YAML 文件来创建，但是发现很多朋友对 YAML 文件来创建一个 POD 还是非常陌生。所以我们来简单看看 YAML 文件是如何工作的，并使用 YAML 文件来定义一个 kubernetes pod，然后再来定义一个 kubernetes deployment吧。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes Deployment滚动升级</title>
      <link>https://www.qikqiak.com/post/kubernetes-rollout-update/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/kubernetes-rollout-update/</guid>
      <description>&lt;p&gt;我们&lt;code&gt;k8s&lt;/code&gt;集群使用的是1.7.7版本的，该版本中官方已经推荐使用&lt;code&gt;Deployment&lt;/code&gt;代替&lt;code&gt;Replication Controller&lt;/code&gt;(rc)了，&lt;code&gt;Deployment&lt;/code&gt;继承了rc的全部功能外，还可以查看升级详细进度和状态，当升级出现问题的时候，可以使用回滚操作回滚到指定的版本，每一次对Deployment的操作，都会保存下来，变能方便的进行回滚操作了，另外对于每一次升级都可以随时暂停和启动，拥有多种升级方案：&lt;code&gt;Recreate&lt;/code&gt;删除现在的&lt;code&gt;Pod&lt;/code&gt;，重新创建；&lt;code&gt;RollingUpdate&lt;/code&gt;滚动升级，逐步替换现有&lt;code&gt;Pod&lt;/code&gt;，对于生产环境的服务升级，显然这是一种最好的方式。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>