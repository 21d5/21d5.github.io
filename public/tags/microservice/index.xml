<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>microservice on 阳明的博客</title>
    <link>https://www.qikqiak.com/tags/microservice/</link>
    <description>Recent content in microservice on 阳明的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.qikqiak.com/tags/microservice/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>TDD开发容器化的Python微服务应用(二)</title>
      <link>https://www.qikqiak.com/post/tdd-develop-python-microservice-app-part2/</link>
      <pubDate>Sat, 13 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/tdd-develop-python-microservice-app-part2/</guid>
      <description>&lt;p&gt;本节课我们将我们的项目拆分成3个工程，我们也会增加一些集成测试来确保每一个服务都能够正确的运行，引入持续集成概念，最后，我们还将添加一个&lt;code&gt;ReactJS&lt;/code&gt;的客户端。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TDD开发容器化的Python微服务应用(一)</title>
      <link>https://www.qikqiak.com/post/tdd-develop-python-microservice-app/</link>
      <pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/tdd-develop-python-microservice-app/</guid>
      <description>&lt;p&gt;在这个课程中，你将学习如何使用&lt;code&gt;Docker&lt;/code&gt;快速创建开发环境、管理多个微服务，应用程序在本地运行后，您将学习怎样在生产环境部署应用。我们也会练习&lt;code&gt;TDD&lt;/code&gt;(测试驱动开发)，在你的项目中测试先行，我们重点将放在服务端的单元测试、功能和集成测试以及端到端的测试上面，以确保整个系统按预期工作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>服务网格(Service Mesh)是什么?</title>
      <link>https://www.qikqiak.com/post/what-is-service-mesh/</link>
      <pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/what-is-service-mesh/</guid>
      <description>&lt;p&gt;现在最火的后端架构无疑是&lt;code&gt;微服务&lt;/code&gt;了，微服务将之前的单体应用拆分成了许多独立的服务应用，每个微服务都是独立的，好处自然很多，但是随着应用的越来越大，微服务暴露出来的问题也就随之而来了，微服务越来越多，管理越来越麻烦，特别是要你部署一套新环境的时候，你就能体会到这种痛苦了，随之而来的&lt;strong&gt;服务发现、负载均衡、Trace跟踪、流量管理、安全认证&lt;/strong&gt;等等问题。如果从头到尾完成过一套微服务框架的话，你就会知道这里面涉及到的东西真的非常多。当然随着微服务的不断发展，微服务的生态也不断完善，最近就发现新一代的微服务开发就悄然兴起了，那就是&lt;code&gt;服务网格/Service Mesh&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>