<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on 阳明的博客</title>
    <link>https://www.qikqiak.com/tags/python/</link>
    <description>Recent content in python on 阳明的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 24 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.qikqiak.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用编程语言描述 Kubernetes 应用 - cdk8s</title>
      <link>https://www.qikqiak.com/post/use-cdk8s-define-k8s-apps/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/use-cdk8s-define-k8s-apps/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/awslabs/cdk8s&#34;&gt;cdk8s&lt;/a&gt; 是 AWS Labs 发布的一个使用 TypeScript 编写的新框架，它允许我们使用一些面向对象的编程语言来定义 Kubernetes 的资源清单，cdk8s 最终也是生成原生的 Kubernetes YAML 文件，所以我们可以在任何地方使用 cdk8s 来定义运行的 Kubernetes 应用资源。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>深入理解 Python 元类</title>
      <link>https://www.qikqiak.com/post/what-is-metaclass-in-python/</link>
      <pubDate>Tue, 19 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/what-is-metaclass-in-python/</guid>
      <description>&lt;p&gt;这是一篇在&lt;a href=&#34;http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python&#34;&gt;Stack overflow&lt;/a&gt;上很热的帖子。提问者自称已经掌握了有关 Python OOP 编程中的各种概念，但始终觉得元类(metaclass)难以理解。他知道这肯定和自省有关，但仍然觉得不太明白，希望大家可以给出一些实际的例子和代码片段以帮助理解，以及在什么情况下需要进行元编程。于是 e-satis 同学给出了神一般的回复，该回复获得了985点的赞同点数，更有人评论说这段回复应该加入到 Python 的官方文档中去。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>21天入门机器学习</title>
      <link>https://www.qikqiak.com/post/ai-start-course/</link>
      <pubDate>Mon, 18 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/ai-start-course/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.qikqiak.com/post/ai-start-course/&#34;&gt;&lt;img src=&#34;https://images.gitbook.cn/FkgyuMCADQVOT1IYxJ9pR2HnFlV2&#34; alt=&#34;21天入门机器学习&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AI 时代，大家都对各种人工智能岗位充满好奇和憧憬，但普遍都不了解，各个岗位具体是做什么工作的。在这里给大家打个比喻，虽然不太恰当，但非常形象！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;做算法是屠龙，仗剑江湖，天外飞仙；&lt;/li&gt;
&lt;li&gt;做工程是狩猎，跃马奔腾，纵酒狂歌；&lt;/li&gt;
&lt;li&gt;做数据是养猪，每天拌猪食清猪粪，一脸土一身泥。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AI 原本是一个专业领域，没什么特别的。作为码农一枚，笔者的工作内容正好在这个领域。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Mac 下安装 cryptography 失败</title>
      <link>https://www.qikqiak.com/post/install-cryptography-failed-in-mac/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/install-cryptography-failed-in-mac/</guid>
      <description>&lt;p&gt;在&lt;code&gt;Mac&lt;/code&gt;下面安装&lt;code&gt;cryptography&lt;/code&gt;依赖包，始终报错，出现&lt;code&gt;&#39;openssl/opensslv.h&#39; file not found&lt;/code&gt;的错误。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TDD开发容器化的Python微服务应用(二)</title>
      <link>https://www.qikqiak.com/post/tdd-develop-python-microservice-app-part2/</link>
      <pubDate>Sat, 13 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/tdd-develop-python-microservice-app-part2/</guid>
      <description>&lt;p&gt;本节课我们将我们的项目拆分成3个工程，我们也会增加一些集成测试来确保每一个服务都能够正确的运行，引入持续集成概念，最后，我们还将添加一个&lt;code&gt;ReactJS&lt;/code&gt;的客户端。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python 虚拟环境全知道</title>
      <link>https://www.qikqiak.com/post/python-virtualenv-all-know/</link>
      <pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/python-virtualenv-all-know/</guid>
      <description>&lt;p&gt;对于每个&lt;code&gt;python&lt;/code&gt;项目依赖的库版本都有可能不一样，如果将依赖包都安装到公共环境的话显然是没法进行区分的，甚至是不同的项目使用的&lt;code&gt;python&lt;/code&gt;版本都不尽相同，有的用&lt;code&gt;python2.7&lt;/code&gt;，有的用&lt;code&gt;python3.6&lt;/code&gt;，所以对于&lt;code&gt;python&lt;/code&gt;项目的环境进行隔离管理就成为一个必然的需求了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TDD开发容器化的Python微服务应用(一)</title>
      <link>https://www.qikqiak.com/post/tdd-develop-python-microservice-app/</link>
      <pubDate>Thu, 28 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/tdd-develop-python-microservice-app/</guid>
      <description>&lt;p&gt;在这个课程中，你将学习如何使用&lt;code&gt;Docker&lt;/code&gt;快速创建开发环境、管理多个微服务，应用程序在本地运行后，您将学习怎样在生产环境部署应用。我们也会练习&lt;code&gt;TDD&lt;/code&gt;(测试驱动开发)，在你的项目中测试先行，我们重点将放在服务端的单元测试、功能和集成测试以及端到端的测试上面，以确保整个系统按预期工作。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Django 中STATIC_ROOT 与STATICFILES_DIRS的区别</title>
      <link>https://www.qikqiak.com/post/django-staticroot-staticfilesdirs-function/</link>
      <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/django-staticroot-staticfilesdirs-function/</guid>
      <description>&lt;p&gt;在做&lt;code&gt;Django&lt;/code&gt;项目的时候，经常会遇到静态文件访问的问题，在本地开发的时候可以正常的访问静态文件，部署到服务器上后就出现各种幺蛾子了，我猜你一定也遇到过吧？之前在&lt;code&gt;settings.py&lt;/code&gt;配置文件中对&lt;code&gt;STATIC_ROOT&lt;/code&gt;与&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;两个配置项不是特别理解，总感觉都差不多，在线上就把&lt;code&gt;STATIC_ROOT&lt;/code&gt;替换成&lt;code&gt;STATICFILES_DIRS&lt;/code&gt;了，虽然可以解决问题，但是却没有知其所以然。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用Python 优雅的将PDF 转换成图片</title>
      <link>https://www.qikqiak.com/post/python-convert-pdf-images/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/python-convert-pdf-images/</guid>
      <description>&lt;p&gt;之前收集了很多优秀的&lt;code&gt;PDF&lt;/code&gt;文档，但是需要看的时候不是很方便，需要去找到这个文件，如果是在手机上的话往往还需要下载&lt;code&gt;PDF&lt;/code&gt;相关的插件才行，而且最大的问题是不便于资料的整理和分享。如果能够将&lt;code&gt;PDF&lt;/code&gt;转换成网页，岂不是就能解决这些问题了？还能直接分享出去。&lt;/p&gt;

&lt;p&gt;这里利用&lt;code&gt;PyPDF&lt;/code&gt;包来处理&lt;code&gt;PDF&lt;/code&gt;文件，为了方便快捷，我这里直接将一个页面转换成图片，就不需要去识别页面中的每一个&lt;code&gt;PDF&lt;/code&gt;元素了，这是没必要的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python装饰器简介</title>
      <link>https://www.qikqiak.com/post/django-decorator-usage/</link>
      <pubDate>Mon, 14 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/django-decorator-usage/</guid>
      <description>&lt;p&gt;装饰器本质上是一个&lt;code&gt;Python&lt;/code&gt;函数，它可以让其他函数在不需要做任何代码变动的前提下增加额外功能，装饰器的返回值也是一个函数对象。它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码并继续重用。概括的讲，&lt;strong&gt;装饰器的作用就是为已经存在的对象添加额外的功能&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>用python处理csv文件</title>
      <link>https://www.qikqiak.com/post/python-process-csv-file/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/python-process-csv-file/</guid>
      <description>&lt;p&gt;&lt;code&gt;CSV&lt;/code&gt;通常是纯文本文件。可以用&lt;code&gt;Sublime Text&lt;/code&gt;或者&lt;code&gt;EXCEL&lt;/code&gt;打开，&lt;code&gt;python&lt;/code&gt;提供了一个非常强大的处理csv文件的库csv。&lt;/p&gt;

&lt;p&gt;一般情况，如果csv文件不是很复杂则可以直接输出文件中每行的数据，代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;import&lt;/span&gt; csv

&lt;span style=&#34;color:#ff79c6&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;read_csv_file&lt;/span&gt;(path):
    &lt;span style=&#34;color:#ff79c6&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;open&lt;/span&gt;(path, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;as&lt;/span&gt; f:  &lt;span style=&#34;color:#6272a4&#34;&gt;# r表示读取，b表示读取的文件&lt;/span&gt;
        reader &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; csv&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;reader(f)
        &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; row &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; reader:
            &lt;span style=&#34;color:#ff79c6&#34;&gt;print&lt;/span&gt; row
    f&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;close()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>