<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>coredns on 阳明的博客</title>
    <link>https://www.qikqiak.com/tags/coredns/</link>
    <description>Recent content in coredns on 阳明的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.qikqiak.com/tags/coredns/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>解决 CoreDNS 自定义域名失效的问题</title>
      <link>https://www.qikqiak.com/post/resolve-coredns-hosts-invalid/</link>
      <pubDate>Thu, 14 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/resolve-coredns-hosts-invalid/</guid>
      <description>&lt;p&gt;前几天我们在解决 CoreDNS 的5秒超时问题的时候，使用了 &lt;a href=&#34;https://www.qikqiak.com/post/use-nodelocal-dns-cache/&#34;&gt;NodeLocal DNSCache&lt;/a&gt; 来解决这个问题，集群 DNS 的解析性能也明显大幅提升了。但是今天确遇到一个很大的坑，我们在做 DevOps 实验的时候，相关的工具都使用的是自定义的域名，这个时候要互相访问的话就需要添加自定义的域名解析，我们可以通过给 Pod 添加 &lt;code&gt;hostAlias&lt;/code&gt; 来解决，但是在使用 Jenkins 的 Kubernetes 插件的时候却不支持这个参数，需要使用 YAML 来自定义，比较麻烦，所以想着通过 CoreDNS 来添加 A 记录解决这个问题。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在 Kubernetes 集群中使用 NodeLocal DNSCache</title>
      <link>https://www.qikqiak.com/post/use-nodelocal-dns-cache/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/use-nodelocal-dns-cache/</guid>
      <description>&lt;p&gt;之前在解决 CoreDNS 的5秒超时问题的时候，除了通过 &lt;code&gt;dnsConfig&lt;/code&gt; 去强制使用 tcp 方式解析之外，我们提到过使用 &lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 来解决这个问题。&lt;code&gt;NodeLocal DNSCache&lt;/code&gt; 通过在集群节点上运行一个 DaemonSet 来提高 clusterDNS 性能和可靠性。处于 &lt;code&gt;ClusterFirst&lt;/code&gt; 的 DNS 模式下的 Pod 可以连接到 &lt;code&gt;kube-dns&lt;/code&gt; 的 serviceIP 进行 DNS 查询。通过 &lt;code&gt;kube-proxy&lt;/code&gt; 组件添加的 &lt;code&gt;iptables&lt;/code&gt; 规则将其转换为 &lt;code&gt;CoreDNS&lt;/code&gt; 端点。通过在每个集群节点上运行 DNS 缓存，NodeLocal DNSCache 可以缩短 DNS 查找的延迟时间、使 DNS 查找时间更加一致，以及减少发送到 kube-dns 的 DNS 查询次数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 kubeadm 搭建 v1.15.3 版本 Kubernetes 集群</title>
      <link>https://www.qikqiak.com/post/use-kubeadm-install-kubernetes-1.15.3/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/use-kubeadm-install-kubernetes-1.15.3/</guid>
      <description>&lt;p&gt;以前文章和视频中都是&lt;a href=&#34;https://www.qikqiak.com/use-kubeadm-install-kubernetes-1.10/&#34;&gt;使用的 Kubeadm 搭建的 Kubernetes 集群&lt;/a&gt;，但是版本比较低了（1.10.0版本），近期有不少反馈让更新下版本，本文将通过 Kubeadm 来搭建最新版本的 Kubernetes 1.15.3 集群，其实和以前搭建的方式方法基本一致，我们这里准备使用 calico 网络插件以及 ipvs 模式的 kube-proxy。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>办公环境下 kubernetes 网络互通方案</title>
      <link>https://www.qikqiak.com/post/office-env-k8s-network/</link>
      <pubDate>Fri, 11 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/office-env-k8s-network/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.qikqiak.com/post/office-env-k8s-network/&#34;&gt;&lt;img src=&#34;https://bxdc-static.oss-cn-beijing.aliyuncs.com/images/HbjHRJ.jpg&#34; alt=&#34;office-env-k8s-network&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在 kubernetes 的网络模型中，基于官方默认的 CNI 网络插件 Flannel，这种 Overlay Network（覆盖网络）可以轻松的实现 pod 间网络的互通。当我们把基于 spring cloud 的微服务迁移到 k8s 中后，无须任何改动，微服务 pod 可以通过 Eureka 注册后可以互相轻松访问。除此之外，我们可以通过 ingress + ingress controller ，在每个节点上，把基于 http 80端口、https 443端口的用户请求流量引入到集群服务中。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>集群内部服务发现之 DNS</title>
      <link>https://www.qikqiak.com/post/service-found-dns/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/service-found-dns/</guid>
      <description>&lt;p&gt;前面我们给大家讲解了&lt;code&gt;Service&lt;/code&gt;的用法，我们可以通过 Service 生成的&lt;code&gt;ClusterIP(VIP)&lt;/code&gt;来访问 Pod 提供的服务，但是在使用的时候还有一个问题：我们怎么知道某个应用的 VIP 呢？比如我们有两个应用，一个是 api 应用，一个是 db 应用，两个应用都是通过&lt;code&gt;Deployment&lt;/code&gt;进行管理的，并且都通过 Service 暴露出了端口提供服务。api 需要连接到 db 这个应用，我们只知道 db 应用的名称和 db 对应的 Service 的名称，但是并不知道它的 VIP 地址，我们前面的 Service 课程中是不是学习到我们通过&lt;code&gt;ClusterIP&lt;/code&gt;就可以访问到后面的&lt;code&gt;Pod&lt;/code&gt;服务，如果我们知道了 VIP 的地址是不是就行了？&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>