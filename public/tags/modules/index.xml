<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>modules on 阳明的博客</title>
    <link>https://www.qikqiak.com/tags/modules/</link>
    <description>Recent content in modules on 阳明的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 16 Jul 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.qikqiak.com/tags/modules/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Modules 基本使用（视频）</title>
      <link>https://www.qikqiak.com/post/go-modules-usage/</link>
      <pubDate>Tue, 16 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.qikqiak.com/post/go-modules-usage/</guid>
      <description>&lt;p&gt;Go 语言中一直被人诟病的一个问题就是没有一个比较好用的依赖管理系统，GOPATH 的设计让开发者一直有很多怨言，在 Go 语言快速发展的过程中也出现了一些比较优秀的依赖管理工具，比如 govendor、dep、glide 等，有一些差不多成了半官方的工具了，但是这些工具都还是需要依赖于 GOPATH，为了彻底解决这个“祸水”，随着 Go1.11 的发布，Golang 官方给我们带来了依赖管理的全新特性&lt;code&gt;Go Modules&lt;/code&gt;，这是 Golang 全新的一套依赖管理系统。下面我们就来看下 Go Modules 是如何使用的。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>